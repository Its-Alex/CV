{"version":3,"sources":["components/Theme.js","components/LeftBar.js","components/Description.js","pages/Home.js","i18n/I18n.js","index.js","ServiceWorker.js"],"names":["Theme","props","href","rel","styles","css","children","SidebarCSS","ImageProfilCSS","Sidebar","t","useTranslation","id","src","srcSet","sizes","alt","className","source","githubLink","linkedinLink","twitterLink","openSourceWikiFrLink","spacefillFrLink","fortyTwoLink","Home","LeftBar","Description","resources","en","translation","TranslationEN","link","fr","TranslationFR","i18n","use","initReactI18next","LanguageDetector","init","ns","defaultNs","defaultLng","lngs","fallbackLng","nsSeparator","keySeparator","interpolation","escapeValue","httpLink","HttpLink","uri","authLink","ApolloLink","operation","forward","setContext","headers","authorization","client","ApolloClient","concat","cache","InMemoryCache","ReactDOM","render","document","getElementById","serviceWorker","Boolean","window","location","hostname","match","unregister","navigator","ready","then","registration"],"mappings":"sxCAKA,IA8DeA,EA9DD,SAACC,GACb,OACE,oCACE,kBAAC,IAAD,KACE,0BAAMC,KAAK,4EAA4EC,IAAI,gBAE7F,kBAAC,IAAD,CACEC,OAAQC,YAAF,OA8CPJ,EAAMK,UAAaL,EAAMK,W,iqCCtDhC,IAAMC,EAAaF,YAAH,KAaVG,EAAiBH,YAAH,KAoDLI,EA7CC,SAACR,GAAW,IAClBS,EAAMC,cAAND,EAER,OACE,mCAAST,EAAT,CAAgBI,IAAKE,IACnB,mBAAKF,IAAKA,YAAF,MAUN,mBAAKO,GAAG,cAAcC,IAAI,uEACxBC,OAAM,uQAGNC,MAAM,oFAINC,IAAI,SAASX,IAAKG,KAGtB,kBAAII,GAAG,eAAeP,IAAKA,YAAF,MAWvB,kBAAIY,UAAU,eAAeZ,IAAKA,YAAF,MAA2B,iBAAGA,IAAKA,YAAF,KAE9DH,KAAMQ,EAAE,gBAAiBA,EAAE,e,iBC9BvBV,EA7BD,SAACC,GAAW,IAChBS,EAAMC,cAAND,EAER,OACE,oCACE,kBAAC,IAAD,CAAeQ,OAAQR,EAAE,yTAYlB,CACLS,WAAY,8BACZC,aAAc,wCACdC,YAAa,kCACbC,qBAAsB,4CACtBC,gBAAiB,+BACjBC,aAAc,2B,4cCrBtB,IA0BeC,EA1BF,SAACxB,GACZ,OACE,mBAAKW,GAAG,iBAAiBP,IAAKA,YAAF,MAK1B,YAACqB,EAAD,CAASd,GAAG,UAAUP,IAAKA,YAAF,OAKzB,mBAAKO,GAAG,eAAeP,IAAKA,YAAF,MAMxB,uBACE,YAACsB,EAAD,U,gCChBJC,EAAY,CAChBC,GAAI,CACFC,YAAaC,EACbC,K,OAEFC,GAAI,CACFH,YAAaI,EACbF,K,QAIJG,IACGC,IAAIC,KACJD,IAAIE,KACJC,KAAK,CACJX,YACAY,GAAI,CAAC,cAAe,QACpBC,UAAW,cACXC,WAAY,KACZC,KAAM,CAAC,KAAM,MACbC,YAAa,KACbC,YAAa,IACbC,cAAc,EACdC,cAAe,CACbC,aAAa,KAIJb,EAAf,EAAeA,IC3BTc,EAAW,IAAIC,IAAS,CAAEC,IAAK,mCAE/BC,EAAW,IAAIC,KAAW,SAACC,EAAWC,GAO1C,OANAD,EAAUE,WAAW,CACnBC,QAAS,CACPC,cAAe,qDAIZH,EAAQD,MAGXK,EAAS,IAAIC,IAAa,CAC9B5B,KAAMoB,EAASS,OAAOZ,GACtBa,MAAO,IAAIC,MAGbC,IAASC,OACP,kBAAC,IAAD,CAAgBN,OAAQA,GACtB,kBAAC,EAAD,KACE,kBAAC,EAAD,QAGFO,SAASC,eAAe,SAE5BC,O,iCCnCA,8CAYoBC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DA8GC,SAASC,IACV,kBAAmBC,WACrBA,UAAUP,cAAcQ,MAAMC,MAAK,SAAAC,GACjCA,EAAaJ,mB","file":"static/js/main.46d0bcc4.chunk.js","sourcesContent":["import React from 'react'\nimport PropTypes from 'prop-types'\nimport { Global, css } from '@emotion/core'\nimport Helmet from 'react-helmet'\n\nconst Theme = (props) => {\n  return (\n    <>\n      <Helmet>\n        <link href='https://fonts.googleapis.com/css?family=Lato:300,400,700,900&display=swap' rel='stylesheet' />\n      </Helmet>\n      <Global\n        styles={css`\n          * {\n            box-sizing: border-box;\n            outline: none;\n            scroll-behavior: smooth;\n            font-family: 'Lato', sans-serif;\n            font-size: 1rem;\n          }\n\n          ::-webkit-scrollbar-track {\n            background: #bdbdbd;\n          }\n\n          ::-webkit-scrollbar {\n            width: 6px;\n          }\n\n          ::-webkit-scrollbar-thumb {\n            background-color: #757575;\n          }\n\n          html, body, #root, #root-container {\n            margin: 0;\n            padding: 0;\n            width: 100%;\n            height: 100%;\n            background-color: #FCFBFB;\n          }\n\n          li {\n            list-style-type: none;\n          }\n\n          ul {\n            margin: 0;\n            padding: 0;\n          }\n\n          a {\n            text-decoration: none;\n            color: inherit;\n            font-weight: 700;\n            font-size: 1.1rem;\n          }\n        `}\n      />\n      {props.children && (props.children)}\n    </>\n  )\n}\n\nTheme.propTypes = {\n  children: PropTypes.element\n}\n\nexport default Theme\n","/** @jsx jsx */\nimport { jsx, css } from '@emotion/core'\nimport { useTranslation } from 'react-i18next'\n\nconst SidebarCSS = css`\n  max-width: 450px;\n\n  display: grid;\n  grid-template-columns: 100%;\n  grid-template-rows: 21% 20% 8% 20% 31%;\n  place-content: center;\n  \n  clip-path: polygon(0 0, 100% 0, 70% 100%, 0% 100%);\n\n  background: linear-gradient(10deg, #502BE3, #9630FD);\n`\n\nconst ImageProfilCSS = css`\n  width: 100%;\n  max-width: 300px;\n\n  border-radius: 100%;\n`\n\nconst Sidebar = (props) => {\n  const { t } = useTranslation()\n\n  return (\n    <div {...props} css={SidebarCSS}>\n      <div css={css`\n        grid-row-start: 2;\n\n        padding: 10%;\n\n        display: grid;\n        grid-template: 100% / 100%;\n\n        place-items: center;\n      `}>\n        <img id='sidebar-img' src='https://s.gravatar.com/avatar/558cb4dd16019bf6123d241ad5d6ee56?s=512'\n          srcSet={`https://s.gravatar.com/avatar/558cb4dd16019bf6123d241ad5d6ee56?s=320 64w,\n                  https://s.gravatar.com/avatar/558cb4dd16019bf6123d241ad5d6ee56?s=480 128w,\n                  https://s.gravatar.com/avatar/558cb4dd16019bf6123d241ad5d6ee56?s=800 256w`}\n          sizes='(max-width: 64px) 64px,\n              (max-width: 128px) 128px,\n              (max-width: 256px) 256px,\n              512px'\n          alt='profil' css={ImageProfilCSS}\n        />\n      </div>\n      <ul id='sidebar-list' css={css`\n        grid-row-start: 4;\n\n        display: grid;\n        grid-template-rows: 30% 20% 20% 30%;\n        place-content: center;\n\n        font-weight: 900;\n        font-size: 1,2rem;\n        color: #FCFBFB;\n      `}>\n        <li className='sidebar-menu' css={css`grid-row-start: 3;`}><a css={css`\n          font-size: 1.3rem;\n        `} href={t('link:resume')}>{t('Resume')}</a></li>\n      </ul>\n    </div>\n  )\n}\n\nexport default Sidebar\n","import React from 'react'\nimport ReactMarkdown from 'react-markdown'\nimport { useTranslation } from 'react-i18next'\n\nconst Theme = (props) => {\n  const { t } = useTranslation()\n\n  return (\n    <>\n      <ReactMarkdown source={t(`\nI'm [Alexandre]({{githubLink}}).\n\nI'm fullstack developer at [Spacefill]({{spacefillFrLink}}).\n\n[Open source]({{openSourceWikiFrLink}}) lover.\n\nOld student at [42]({{fortyTwoLink}}).\n\nyou can find me on [Github]({{githubLink}}),\n[Linkedin]({{linkedinLink}}),\n[Twitter]({{twitterLink}}).\n          `, {\n        githubLink: 'https://github.com/Its-Alex',\n        linkedinLink: 'https://www.linkedin.com/in/its-alex/',\n        twitterLink: 'https://twitter.com/Its__Alex__',\n        openSourceWikiFrLink: 'https://fr.wikipedia.org/wiki/Open_source',\n        spacefillFrLink: 'https://www.spacefill.fr/fr/',\n        fortyTwoLink: 'https://www.42.fr/'\n      })} />\n    </>\n  )\n}\n\nexport default Theme\n","/** @jsx jsx */\nimport { jsx, css } from '@emotion/core'\n\nimport LeftBar from '../components/LeftBar'\nimport Description from '../components/Description'\n\nconst Home = (props) => {\n  return (\n    <div id='root-container' css={css`\n    display: grid;\n    grid-template-rows: 100%;\n    grid-template-columns: 20% 80%;\n  `} >\n      <LeftBar id='sidebar' css={css`\n        grid-column: 1 / 2;\n\n        padding-right: 10%;\n      `} />\n      <div id='root-content' css={css`\n        grid-column: 2 / 2;\n\n        display: grid;\n        place-items: center;\n      `} >\n        <div>\n          <Description />\n        </div>\n      </div>\n    </div>\n  )\n}\n\nexport default Home\n","import i18n from 'i18next'\nimport { initReactI18next } from 'react-i18next'\nimport LanguageDetector from 'i18next-browser-languagedetector'\n\nimport TranslationEN from '../translations/en/translation.json'\nimport TranslationFR from '../translations/fr/translation.json'\nimport TranslationLinkEN from '../translations/en/link.json'\nimport TranslationLinkFR from '../translations/fr/link.json'\n\nconst resources = {\n  en: {\n    translation: TranslationEN,\n    link: TranslationLinkEN\n  },\n  fr: {\n    translation: TranslationFR,\n    link: TranslationLinkFR\n  }\n}\n\ni18n\n  .use(initReactI18next)\n  .use(LanguageDetector)\n  .init({\n    resources,\n    ns: ['translation', 'link'],\n    defaultNs: 'translation',\n    defaultLng: 'en',\n    lngs: ['en', 'fr'],\n    fallbackLng: 'fr',\n    nsSeparator: ':',\n    keySeparator: false,\n    interpolation: {\n      escapeValue: false\n    }\n  })\n\nexport default i18n\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport { ApolloClient, ApolloLink, InMemoryCache, HttpLink } from 'apollo-boost'\nimport { ApolloProvider } from '@apollo/react-hooks'\n\nimport * as serviceWorker from './ServiceWorker'\nimport GlobalTheme from './components/Theme'\nimport Home from './pages/Home'\nimport './i18n/I18n'\n\nconst httpLink = new HttpLink({ uri: 'https://api.github.com/graphql' })\n\nconst authLink = new ApolloLink((operation, forward) => {\n  operation.setContext({\n    headers: {\n      authorization: 'Bearer 923c2ce575fe95918fe182a1ce0e60a8bea7c43f'\n    }\n  })\n\n  return forward(operation)\n})\n\nconst client = new ApolloClient({\n  link: authLink.concat(httpLink),\n  cache: new InMemoryCache()\n})\n\nReactDOM.render(\n  <ApolloProvider client={client}>\n    <GlobalTheme>\n      <Home />\n    </GlobalTheme>\n  </ApolloProvider>\n  , document.getElementById('root'))\n\nserviceWorker.unregister()\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n)\n\nexport function register (config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href)\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config)\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          )\n        })\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config)\n      }\n    })\n  }\n}\n\nfunction registerValidSW (swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing\n        if (installingWorker == null) {\n          return\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              )\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration)\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.')\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration)\n              }\n            }\n          }\n        }\n      }\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error)\n    })\n}\n\nfunction checkValidServiceWorker (swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  global.fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type')\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload()\n          })\n        })\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config)\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      )\n    })\n}\n\nexport function unregister () {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister()\n    })\n  }\n}\n"],"sourceRoot":""}